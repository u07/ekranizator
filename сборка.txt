

Выбираем нужный компилятор:

Для 32:

export CC=i686-w64-mingw32-gcc
export CXX=i686-w64-mingw32-g++
export CROSS_PREFIX=i686-w64-mingw32-
export BUILD_HOST=i686-w64-mingw32
export ARCH=x86

export AS=nasm
export AR=i686-w64-mingw32-ar
export LD=i686-w64-mingw32-ld
export RANLIB=i686-w64-mingw32-ranlib
export STRIP=i686-w64-mingw32-strip

export PATH="$HOME/bin:$PATH"
export BUILD_PATH="$HOME/ffmpeg_build_32"
export PKG_CONFIG_PATH="$BUILD_PATH/lib/pkgconfig"


Для 64:

export CC=x86_64-w64-mingw32-gcc
export CXX=x86_64-w64-mingw32-g++
export CROSS_PREFIX=x86_64-w64-mingw32-
export BUILD_HOST=x86_64-w64-mingw32
export ARCH=x86_64

export AS=nasm
export AR=x86_64-w64-mingw32-ar
export LD=x86_64-w64-mingw32-ld
export RANLIB=x86_64-w64-mingw32-ranlib
export STRIP=x86_64-w64-mingw32-strip

export PATH="$HOME/bin:$PATH"
export BUILD_PATH="$HOME/ffmpeg_build"
export PKG_CONFIG_PATH="$BUILD_PATH/lib/pkgconfig"





Готовимся:

sudo apt-get update
sudo apt-get upgrade

sudo apt-get  install \
  autoconf \
  automake \
  build-essential \
  cmake \
  git-core \
  libass-dev \
  libfreetype6-dev \
  libgnutls28-dev \
  libmp3lame-dev \
  libtool \
  libvorbis-dev \
  ninja-build \
  pkg-config \
  texinfo \
  wget \
  yasm \
  meson \
  zlib1g-dev
  
sudo apt install \
  mingw-w64 \
  mingw-w64-tools \
  gcc-mingw-w64 \
  g++-mingw-w64 \
  gcc-mingw-w64-i686 \
  g++-mingw-w64-i686 \
  gcc-mingw-w64-x86-64 \
  g++-mingw-w64-x86-64
  

mkdir -p ~/ffmpeg_sources ~/ffmpeg_bin


# Если ошибся
make clean && make distclean


# Собираем NASM для x264 (не обязательно, можно просто установить)

cd ~/ffmpeg_sources
wget https://www.nasm.us/pub/nasm/releasebuilds/2.16.01/nasm-2.16.01.tar.bz2
tar xjvf nasm-2.16.01.tar.bz2
cd nasm-2.16.01
./autogen.sh 
CC=/usr/bin/gcc ./configure --prefix=$BUILD_PATH --bindir="$HOME/bin" 
make && make install


# Собираем zlib для png_decoder (не обязательно, можно просто установить)

cd ~/ffmpeg_sources
wget http://zlib.net/zlib-1.3.1.tar.gz
tar xzvf zlib-1.3.1.tar.gz
cd zlib-1.3.1
CFLAGS="-O3" ./configure --prefix=$BUILD_PATH --static --libdir=$BUILD_PATH/lib
make -j$(nproc) && make install


# Собираем LibOpus

Чекнуть последнюю версию опуса: https://opus-codec.org/downloads/

cd ~/ffmpeg_sources
wget https://downloads.xiph.org/releases/opus/opus-1.5.2.tar.gz
tar xzvf opus-1.5.2.tar.gz
cd opus-1.5.2
CFLAGS="-O3 -D_FORTIFY_SOURCE=0" ./configure --prefix=$BUILD_PATH --host=$BUILD_HOST --disable-shared --enable-static --disable-extra-programs
make -j$(nproc) && make install




# Собираем libx264

cd ~/ffmpeg_sources
wget https://code.videolan.org/videolan/x264/-/archive/master/x264-master.tar.bz2
tar xjvf x264-master.tar.bz2
cd x264-master
./configure --prefix=$BUILD_PATH --host=$BUILD_HOST --enable-static --disable-opencl --enable-strip --disable-lavf --disable-swscale --bit-depth=8 --chroma-format=420 --disable-interlaced --disable-avs --disable-ffms --disable-gpac --disable-lsmash --disable-cli  --cross-prefix=$CROSS_PREFIX
make -j$(nproc) && make install

альтернативная 

  ./configure --prefix=$BUILD_PATH --host=$BUILD_HOST --enable-static --disable-opencl --enable-strip --disable-lavf --disable-swscale --bit-depth=8 --chroma-format=420 --disable-interlaced --disable-avs --disable-ffms --disable-gpac --disable-lsmash --disable-cli  --cross-prefix=$CROSS_PREFIX --enable-pic




# Собираем ffmpeg

Фильтр tpad работает неправильно после изменений середины декабря 2023 года.
https://trac.ffmpeg.org/ticket/11273 Но в программе это учтено и не помешает.
  
Посмотреть, что в составе:

ffmpeg -demuxers
ffmpeg -encoders
ffmpeg -decoders

cd ~/ffmpeg_sources
wget -O ffmpeg-snapshot.tar.bz2 https://ffmpeg.org/releases/ffmpeg-snapshot.tar.bz2
tar xjvf ffmpeg-snapshot.tar.bz2
cd ffmpeg


./configure \
 --extra-cflags="-I$BUILD_PATH/include" \
 --extra-ldflags="-L$BUILD_PATH/lib" \
 --pkg-config-flags="--static" \
 --disable-ffprobe \
 --disable-ffplay \
 --disable-doc \
 --disable-everything \
 --disable-network \
 --disable-autodetect \
 --enable-small \
 --enable-decoder=mp3,mp3float,pcm*,adpcm_ima_wav,flac,libopus \
 --enable-decoder=png,jpeg,bmp,webp,mjpeg \
 --enable-demuxer=wav,mp3,flac,ogg,mov,image2,concat,ffmetadata \
 --enable-protocol=file \
 --enable-muxer=mp4,ogg,null \
 --enable-encoder=anull,libopus,libx264 \
 --enable-filter=scale,pad,tpad,aresample \
 --enable-bsf=filter_units,h264_metadata \
 --enable-cross-compile \
 --enable-gpl \
 --enable-libx264 \
 --enable-libopus \
 --enable-zlib \
 --arch=$ARCH  \
 --target-os=mingw32  \
 --prefix=$BUILD_PATH \
 --cross-prefix=$CROSS_PREFIX 


make && make install





# Компилим скрипт в программу

py -3.8-32 -m PyInstaller "D:\...\check_eksmo.py" --onefile -i "D:\...\giza_pyramidki_all_sizes.ico"

Установить пакеты под 32-бит версию и обратно:

	pip config set global.target "C:\Program Files (x86)\Python38-32\Lib\site-packages"
	py -3.8-32 -m pip install (нужные пакеты)
	pip config unset global.target

Компиляция:

pyinstaller.exe            check_eksmo.py --onefile -i giza_pyramidki_all_sizes.ico
py -3.8-32 -m PyInstaller  check_eksmo.py --onefile -i giza_pyramidki_all_sizes.ico

Пути:

C:\Users\user\AppData\Local\Programs\Python\Python38-32\Scripts\pyinstaller.exe
C:\Users\user\AppData\Roaming\Python\Python38\Scripts\pyinstaller.exe





